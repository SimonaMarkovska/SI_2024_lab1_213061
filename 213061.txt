4.Оддалечен (remote) репозиториум SI_2024_lab1_213061 креирав со командата:
	• $ mkdir SI_2024_lab1_213061
	Потоа:
	• $ cd SI_2024_lab1_213061 за да влеземе во него
	• $ git init за иницијализација на Git во директориум

5.$ git remote add origin https://github.com/SimonaMarkovska/SI_2024_lab1_213061.git (за поврзување на локалниот репозиториум со оддалечениот репозиториум)

6.$ echo “# Simona Markovska 213061” > README.md (се креира  README.md датотека во која што го пишува моето име, презиме и број на индекс)
	• $ git add README.md (го ставаме на stage)
	• $ git commit –m “Initial commit” (commit со соодветна порака)

7.Ги креирав фајловите и ги отворив на Notepad, ја вметнувам бараната содржина, ги зачував промените
	• $ git add . (фајловите се на stage)
	• $ git commit –m “Add starter code” (commit со соодветна порака)

8.$ git push –all origin (синхронизација на сите гранки со оддалечениот репозиториум)

9.$ git branch bug1, $ git branch bug2 (ги креирам двете нови гранки)

10.$ git checkout bug1 (префрлање на првата гранка bug1)

11.Го отварам фајлот во Notepad, ја правам соодветната промена и го зачувувам истиот. 
	• $ git add SILab1_1.java (го ставам фајлот на stage)
	• $ git commit -m "Fix wrong condition in filterOddLengthStrings" (commit со дадена порака) 

12.$ git checkout bug2 (префрлање на втората гранка bug2)
 
13.Го отварам фајлот во Notepad, ја правам соодветната промена и го зачувувам истиот.
	• $ git add SILab1_2.java (го ставам фајлот на stage)
	• $ git commit -m "Fix wrong condition in makeBigStringFrom" (commit со дадена порака)

14.$ git checkout bug1 (префрлање на гранката bug1)

15.Во Notepad ги правам бараните промени во методот filterOddLengthStrings
	• $ git add SILab1Main.java (ставаме на stage)
	• $ git commit –m “Call method filterOddLengthStrings in main class” (commit со дадена порака)

16.$ git checkout bug2 (префрлање на гранката bug2)

17.Во Notepad ги правам бараните промени во методот makeBigStringFrom
	• $ git add SILab1Main.java (ставаме на stage)
	• $ git commit –m “Call method makeBigStringFrom in main class” (commit со дадена порака)

18.$ git push --all origin (синхронизација на сите гранки со оддалечениот репозитриум)

19.$ git checkout master (префрлање на гранката master)

20.$ git merge bug1 (ја спојуваме гранката bug1 кон master)

21.$ git push --all origin (синхронизација на сите гранки со оддалечениот репозитриум)

22.$ git checkout bug2 (префрлање на гранката bug2)

23.$ git rebase master (правиме rebase кон гранката master)
        • Поради конфликт правам промена и нов commit
	• $ git commit –m “Call method makeBigStringFrom in main class” (commit со дадена порака)
	• $ git rebase --continue (на кое што дава дека успешно е извршена командата)
24.$ git checkout master (префрлање на гранка master)

25.$ git merge bug2 (спојување на гранката bug2 кон master)

26.$ git push --all 

27.$ git push --force --all origin (синхронизација на сите гранки)

28.$ git log > logs.txt (со оваа наредба се додава logs.txt и во неа се вметнуваат сите досегашни git логови)
	• $ git add logs.txt (се става на stage)
	• $ git add 213061.txt (веќе креираната датотека 213061.txt во која ја водев мојата досегашна документација ја ставам на stage) 
	• $ git commit -m "Final commit” (го правам последниот commit со соодветната порака)
29.$ git push --all (синхронизација на сите гранки со оддалечениот репозиториум)